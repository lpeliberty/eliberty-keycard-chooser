{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["tabKeycardType","MaskHelper","configs","ZIPCODE","placeholder","mask","KeyCard","errorKey","localItemInfo","error","get","Map","props","state","checkYes","hasSupport","checkNo","valid","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","changeValidationCard","handleChangeCheckSwisspass","handleChangeZipcode","checked","setState","onChangeCheck","event","type","target","value","property","currentId","newValue","stateUpdateCardNumberTypeProperty","checkValidKeycard","zipCode","pattern","isValid","test","deleteKeyFieldsErrors","formatMessage","intl","errorLabel","id","defaultMessage","updateFieldsErrors","cardnumber","suggest","skierIndex","orderitem","validKeycard","undefined","replace","RegExp","toUpperCase","forEach","item","key","includes","keycards","element","cardType","verifyKeycard","popoverLink","keycardTypes","size","map","data","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","keySeq","first","cardNumber","updateCurrentCardNumberType","renderedCardNumberField","renderedLabelLinkPopover","renderedErrorInputMessage","textType","className","labelKeycard","console","log","aux","isCurrentType","renderedContentForSwisspass","number","params","zipcodeValue","__html","keycardPictureSrc","fields","popover","handleChangeToggle","renderedContentCheckNo","renderedKeyCardTypesContent","React","Component","propTypes","PropTypes","string","isRequired","object","func","updateValidField","bool","intlShape"],"mappings":"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","file":"KeyCard.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape, FormattedHTMLMessage } from 'react-intl';\nimport { Map } from 'immutable';\nimport MaskedInput from 'react-text-mask';\nimport Switch from 'react-toggle-switch';\nimport 'react-toggle-switch/dist/css/switch.min.css';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\nimport {\n  isCurrentCardNumberType,\n  getCurrentCardNumberValue,\n  isCurrentCardNumberValid,\n  getCardNumberTypes,\n  getCardNumberTypeElementProperty,\n  isSwissPassPropertyValid,\n} from '../../helpers/CardTypeHelper';\n\nconst configs = {\n  ZIPCODE: {\n    placeholder: '0000',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n};\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n    return <p className=\"errorInputKeyCard\">{error}</p>;\n  }\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n      valid: true,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.changeValidationCard = this.changeValidationCard.bind(this);\n    this.handleChangeCheckSwisspass = this.handleChangeCheckSwisspass.bind(this);\n    this.handleChangeZipcode = this.handleChangeZipcode.bind(this);\n  }\n\n  /**\n   * Change local state when click support change value\n   * @param checked\n   */\n  handleChangeToggle(checked) {\n    this.setState({\n      checkYes: checked,\n      checkNo: !checked,\n      hasSupport: !checked,\n    });\n    this.props.onChangeCheck(checked ? 'yes' : 'no');\n  }\n\n  /**\n   * Change card number\n   *\n   * @param event\n   * @param type\n   */\n  handleChangeCardNumber(event, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, type, false);\n  }\n\n  /**\n   * handle Change Check Swisspass\n   */\n  handleChangeCheckSwisspass() {\n    const type = 'swisspass';\n    const property = 'checked';\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const newValue = !getCardNumberTypeElementProperty(this.props.localItemInfo, type, property);\n\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, property, newValue);\n\n    this.props.checkValidKeycard(currentId);\n  }\n\n  /**\n   * handle Change Zipcode\n   * @param event\n   */\n  handleChangeZipcode(event) {\n    const type = 'swisspass';\n    const zipCode = event.target.value;\n    const errorKey = 'data.swisspass.zipcode';\n\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcode', zipCode);\n\n    const pattern = /^[0-9]{4}$/;\n    const isValid = pattern.test(zipCode);\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcodeFormatValid', isValid);\n\n    // Delete errors\n    this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n    if (!isValid) {\n      const { formatMessage } = this.props.intl;\n      const errorLabel = formatMessage({ id: 'rp.checkout.customize.swisspass.zipcode.invalid', defaultMessage: 'invalid' });\n      this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n    } else {\n      this.props.checkValidKeycard(currentId);\n    }\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param type\n   * @param suggest\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, type, suggest = true) {\n    let newValue = '';\n    const { formatMessage } = this.props.intl;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const skierIndex = this.props.orderitem.get('skierIndex');\n\n    let validKeycard = getCardNumberTypeElementProperty(this.props.localItemInfo, type, 'formatValid');\n\n    if (cardnumber !== undefined && typeof cardnumber !== 'undefined') {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n      // Force SwissPass number to uppercase\n      if (type === 'swisspass') {\n        cardnumber = cardnumber.toUpperCase();\n      }\n\n      // Update others card types values\n      getCardNumberTypes(this.props.localItemInfo).forEach((item, key) => {\n        if (![type, 'swisspass'].includes(key)) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.stateUpdateCardNumberTypeProperty(skierIndex, key, 'number', newValue);\n        }\n      });\n\n      // Delete errors\n      this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n      const cardType = tabKeycardType[type];\n\n      // Save cardNumber value\n      this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'number', cardnumber);\n\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardType);\n\n        this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'formatValid', validKeycard);\n        this.changeValidationCard(validKeycard);\n\n        this.props.checkValidKeycard(skierIndex);\n\n        // Keycard mask is valid\n        if (!validKeycard) {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  changeValidationCard(value) {\n    this.setState({ valid: value });\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} index={this.props.orderitem.get('skierIndex')} />\n      : '';\n  }\n\n  /**\n   * Render keycard types content (choice or not)\n   *\n   * @param keycardTypes\n   * @returns {XML}\n   */\n  renderedKeyCardTypesContent(keycardTypes) {\n    return (keycardTypes.size > 1\n      ? ( // Display Double Mask KeyCard\n        <div>\n          <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n            { keycardTypes.map((data, type) => (\n              this.renderedLabelTab(tabKeycardType[type], type)\n            )) }\n          </ul>\n          <div className=\"tab-content\">\n            {\n              keycardTypes.map((data, type) => (\n                this.renderedSomeInputKeyCards(type)\n              ))\n            }\n          </div>\n        </div>\n      )\n      :\n      (\n        // Display one Input for keyCard : get the first cardNumber type (first key of map)\n        this.renderedInputOneKeyCard(keycardTypes.keySeq().first())\n      )\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   *\n   * @param type\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type) {\n    const errorKey = 'data.cardNumber';\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Change current cardNumber type\n    this.props.updateCurrentCardNumberType(currentId, type);\n\n    return (\n      <div key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @returns {XML}\n   * @param textType\n   * @param type\n   */\n  renderedLabelTab(textType, type) {\n    let className = 'nav-item';\n    const { formatMessage } = this.props.intl;\n    const labelKeycard = `rp.checkout.keycard.label.${type}`;\n\n    if (isCurrentCardNumberType(this.props.localItemInfo, type)) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={type}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={`type${type}`}\n          onClick={() => {\n            // Change current cardNumber type\n            this.props.updateCurrentCardNumberType(this.props.localItemInfo.get('skierIndex'), type);\n          }}\n        >\n          {formatMessage({ id: labelKeycard, defaultMessage: 'Keycard' })}\n        </a>\n      </li>\n    );\n  }\n\n  /**\n   * Display of the double input mask\n   *\n   * @param type\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type) {\n    console.log('KeyCard::type -> ', type);\n\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${type}`;\n    const errorKey = 'data.cardNumber';\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    const isCurrentType = isCurrentCardNumberType(this.props.localItemInfo, type);\n\n    // active tab on select\n    if (isCurrentType) {\n      className = `${className} active`;\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : ''\n        }\n        {\n          isCurrentCardNumberType(this.props.localItemInfo, 'swisspass')\n            ? this.renderedContentForSwisspass()\n            : null\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Render a cardNumber field\n   *\n   * @param type\n   * @param cardNumber\n   */\n  renderedCardNumberField(type, cardNumber) {\n    return (\n      <CardNumberField\n        key={type}\n        id={type}\n        validInput={this.state.valid}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onAutoSuggestSelected={(number) => {\n          this.handleChangeAutoSuggestCardNumber(number, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n      ? <div className=\"msgCheckNo\">\n        <p>\n          <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n        </p>\n      </div>\n      : ''\n    );\n  }\n\n  /**\n   *\n   * @returns {null}\n   */\n  renderedContentForSwisspass() {\n    const zipcodeValue = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'zipcode');\n    const mask = { ...configs['ZIPCODE']};\n    const { formatMessage } = this.props.intl;\n    const skierIndex = this.props.localItemInfo.get('skierIndex');\n\n    return (<div className=\"contentSwisspass\">\n      <div className=\"wrapperForm\">\n        <MaskedInput\n          {...mask}\n          name=\"zipcode-swiss\"\n          id=\"zipcode-swiss\"\n          data-control=\"true\"\n          onChange={event => this.handleChangeZipcode(event)}\n          value={typeof zipcodeValue !== 'undefined' ? zipcodeValue : ''}\n        />\n        <label htmlFor=\"zipcode-swiss\" className=\"control-label\">\n          <FormattedMessage id=\"rp.checkout.shippingaddress.zipcode\" defaultMessage=\"Zipcode\" />\n        </label>\n      </div>\n      {\n        !isSwissPassPropertyValid(this.props.localItemInfo, 'zipcodeFormatValid')\n          ? KeyCard.renderedErrorInputMessage('data.swisspass.zipcode', this.props.localItemInfo)\n          : ''\n      }\n      <input\n        type=\"checkbox\"\n        checked={getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'checked')}\n        name={`check-swisspass${skierIndex}`}\n        id={`check-swisspass${skierIndex}`}\n        // onChange={() => this.handleChangeCheckSwisspass()}\n        onClick={() => this.handleChangeCheckSwisspass()}\n      />\n      <label htmlFor={`check-swisspass${skierIndex}`} onChange={() => this.handleChangeCheckSwisspass(skierIndex)}>\n        <FormattedMessage id=\"rp.checkout.keycard.swisspass.check.text\" defaultMessage=\"I agree with the conditions of SwissPass\" />\n      </label>\n      <div dangerouslySetInnerHTML={{__html: formatMessage({ id:'rp.checkout.keycard.swisspass.link', defaultMessage: 'Disclaimer' })}} />\n    </div>\n    );\n  }\n\n  render() {\n    const { id, keycardPictureSrc, keycardTypes, fields, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    console.log('KeyCard::keycardTypes -> ', keycardTypes);\n\n    return (\n      <div className=\"blockPopover\" key={id}>\n\n        <div className=\"col-xs-4 keyCardAreaImage\">\n          <img src={keycardPictureSrc} alt=\"keycardPicture\" />\n        </div>\n        <div className=\"row\">\n          <form className=\"col-xs-12\">\n            <div>\n              <div className=\"keycard_area_title\">\n                <div className=\"keycardMessage\">\n                  <FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" />\n                  <PopoverQuestion popover={popover} index={this.props.orderitem.get('skierIndex')} />\n                </div>\n                {fields.get('cardNumber').get('hasSupport', false) === true ?\n                  <Switch\n                    on={!hasSupport}\n                    onClick={() => {\n                      this.handleChangeToggle(hasSupport);\n                    }}\n                  />\n                  : ''\n                }\n              </div>\n            </div>\n\n            <div>\n              <div className=\"col-xs-8 form-group keyCardAreaForm\">\n                { this.renderedContentCheckNo() }\n\n                {this.state.checkYes\n                  ? <div className=\"msgCheckYes\">\n                    { this.renderedKeyCardTypesContent(keycardTypes) }\n                  </div>\n                  : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  id: PropTypes.string.isRequired, // index\n  keycardPictureSrc: PropTypes.string.isRequired, // keycard picture src\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  fields: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateCurrentCardNumberType: PropTypes.func.isRequired, // function to update current cardNumber type\n  updateValidField: PropTypes.func.isRequired, //\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  intl: intlShape.isRequired, // for the internationalization\n  stateUpdateCardNumberTypeProperty: PropTypes.func.isRequired, // function to update cardNumber property value\n  checkValidKeycard: PropTypes.func.isRequired, // function to check complete cardCardNumber valid\n};\n\nexport default injectIntl(KeyCard);\n"]}