{"version":3,"sources":["../../src/helpers/CardTypeHelper.jsx"],"names":["getCardNumberField","canCheckSwissPass","isSwissPassPropertyValid","isCurrentCardNumberType","getCurrentCardNumberType","getCurrentCardTypeElement","getCurrentCardNumberValue","getCardNumberTypes","getCardNumberTypeElement","getCardNumberTypeElementProperty","isCurrentCardNumberValid","localItemInfo","get","Map","swissPassElem","console","log","toJS","property","type","currentCardTypeElement","List"],"mappings":";;;;;QAOgBA,kB,GAAAA,kB;QAWAC,iB,GAAAA,iB;QAcAC,wB,GAAAA,wB;QAYAC,uB,GAAAA,uB;QASAC,wB,GAAAA,wB;QASAC,yB,GAAAA,yB;QAUAC,yB,GAAAA,yB;QAUAC,kB,GAAAA,kB;QAUAC,wB,GAAAA,wB;QAaAC,gC,GAAAA,gC;QAUAC,wB,GAAAA,wB;;AAnHhB;;AAEA;;;;;AAKO,SAASV,kBAAT,CAA4BW,aAA5B,EAA2C;AAChD,SAAOA,cACJC,GADI,CACA,QADA,EACU,IAAIC,cAAJ,EADV,EAEJD,GAFI,CAEA,YAFA,EAEc,IAAIC,cAAJ,EAFd,CAAP;AAGD;;AAED;;;;;AAKO,SAASZ,iBAAT,CAA2BU,aAA3B,EAA0C;AAC/C,MAAMG,gBAAgBN,yBAAyBG,aAAzB,EAAwC,WAAxC,CAAtB;AACAI,UAAQC,GAAR,CAAY,eAAZ,EAA6BF,cAAcG,IAAd,EAA7B;AACA,SAAO,CAACH,cAAcF,GAAd,CAAkB,aAAlB,EAAiC,KAAjC,KACHE,cAAcF,GAAd,CAAkB,oBAAlB,EAAwC,KAAxC,CADG,IAEHE,cAAcF,GAAd,CAAkB,SAAlB,EAA6B,KAA7B,CAFE,MAEuC,IAF9C;AAGD;;AAED;;;;;;AAMO,SAASV,wBAAT,CAAkCS,aAAlC,EAAiDO,QAAjD,EAA2D;AAChE,SAAOV,yBAAyBG,aAAzB,EAAwC,WAAxC,EACJC,GADI,CACAM,QADA,EACU,KADV,CAAP;AAED;;AAED;;;;;;;AAOO,SAASf,uBAAT,CAAiCQ,aAAjC,EAAgDQ,IAAhD,EAAsD;AAC3D,SAAOf,yBAAyBO,aAAzB,MAA4CQ,IAAnD;AACD;;AAED;;;;;AAKO,SAASf,wBAAT,CAAkCO,aAAlC,EAAiD;AACtD,SAAOX,mBAAmBW,aAAnB,EAAkCC,GAAlC,CAAsC,aAAtC,EAAqD,EAArD,CAAP;AACD;;AAED;;;;;AAKO,SAASP,yBAAT,CAAmCM,aAAnC,EAAkD;AACvD,SAAOH,yBAAyBG,aAAzB,EAAwCP,yBAAyBO,aAAzB,CAAxC,CAAP;AACD;;AAED;;;;;;AAMO,SAASL,yBAAT,CAAmCK,aAAnC,EAAuE;AAAA,MAArBO,QAAqB,uEAAV,QAAU;;AAC5E,MAAME,yBAAyBf,0BAA0BM,aAA1B,CAA/B;AACA,SAAOS,uBAAuBR,GAAvB,CAA2BM,QAA3B,EAAqC,EAArC,CAAP;AACD;;AAED;;;;;AAKO,SAASX,kBAAT,CAA4BI,aAA5B,EAA2C;AAChD,SAAOX,mBAAmBW,aAAnB,EAAkCC,GAAlC,CAAsC,OAAtC,EAA+C,IAAIS,eAAJ,EAA/C,CAAP;AACD;;AAED;;;;;;AAMO,SAASb,wBAAT,CAAkCG,aAAlC,EAAiDQ,IAAjD,EAAuD;AAC5D,SAAOnB,mBAAmBW,aAAnB,EACJC,GADI,CACA,OADA,EACS,IAAIS,eAAJ,EADT,EAEJT,GAFI,CAEAO,IAFA,EAEM,IAAIN,cAAJ,EAFN,CAAP;AAGD;;AAED;;;;;;;AAOO,SAASJ,gCAAT,CAA0CE,aAA1C,EAAyDQ,IAAzD,EAA+DD,QAA/D,EAAyE;AAC9E,SAAOV,yBAAyBG,aAAzB,EAAwCQ,IAAxC,EAA8CP,GAA9C,CAAkDM,QAAlD,CAAP;AACD;;AAED;;;;;;AAMO,SAASR,wBAAT,CAAkCC,aAAlC,EAAiD;AACtD,SAAON,0BAA0BM,aAA1B,EAAyCC,GAAzC,CAA6C,aAA7C,EAA4D,KAA5D,KACFZ,mBAAmBW,aAAnB,EAAkCC,GAAlC,CAAsC,OAAtC,EAA+C,KAA/C,CADL;AAED","file":"CardTypeHelper.js","sourcesContent":["import { Map, List } from 'immutable';\n\n/**\n * Return the cardNumber field (properties)\n *\n * @param localItemInfo\n */\nexport function getCardNumberField(localItemInfo) {\n  return localItemInfo\n    .get('fields', new Map())\n    .get('cardNumber', new Map());\n}\n\n/**\n * Function to check the validation of all fields necessary for check swisspass\n * @returns {boolean}\n * @param localItemInfo\n */\nexport function canCheckSwissPass(localItemInfo) {\n  const swissPassElem = getCardNumberTypeElement(localItemInfo, 'swisspass');\n  console.log('swissPassElem', swissPassElem.toJS());\n  return (swissPassElem.get('formatValid', false)\n    && swissPassElem.get('zipcodeFormatValid', false)\n    && swissPassElem.get('checked', false)) === true;\n}\n\n/**\n * Return if swissPass zipCode is valid\n *\n * @param localItemInfo\n * @param property\n */\nexport function isSwissPassPropertyValid(localItemInfo, property) {\n  return getCardNumberTypeElement(localItemInfo, 'swisspass')\n    .get(property, false);\n}\n\n/**\n * Check if current cardNumber type is corresponding to asked type\n *\n * @param localItemInfo\n * @param type\n * @returns {boolean}\n */\nexport function isCurrentCardNumberType(localItemInfo, type) {\n  return getCurrentCardNumberType(localItemInfo) === type;\n}\n\n/**\n * Get current cardNumber type\n *\n * @param localItemInfo\n */\nexport function getCurrentCardNumberType(localItemInfo) {\n  return getCardNumberField(localItemInfo).get('currentType', '');\n}\n\n/**\n * Get the current cardType element\n *\n * @param localItemInfo\n */\nexport function getCurrentCardTypeElement(localItemInfo) {\n  return getCardNumberTypeElement(localItemInfo, getCurrentCardNumberType(localItemInfo));\n}\n\n/**\n * Get cardNumber value by current type\n *\n * @param localItemInfo\n * @param property\n */\nexport function getCurrentCardNumberValue(localItemInfo, property = 'number') {\n  const currentCardTypeElement = getCurrentCardTypeElement(localItemInfo);\n  return currentCardTypeElement.get(property, '');\n}\n\n/**\n * Return the cardNumber types available\n *\n * @param localItemInfo\n */\nexport function getCardNumberTypes(localItemInfo) {\n  return getCardNumberField(localItemInfo).get('types', new List());\n}\n\n/**\n * Get cardType element\n *\n * @param localItemInfo\n * @param type\n */\nexport function getCardNumberTypeElement(localItemInfo, type) {\n  return getCardNumberField(localItemInfo)\n    .get('types', new List())\n    .get(type, new Map());\n}\n\n/**\n * Get cardNumber element property value\n *\n * @param localItemInfo\n * @param type\n * @param property\n */\nexport function getCardNumberTypeElementProperty(localItemInfo, type, property) {\n  return getCardNumberTypeElement(localItemInfo, type).get(property);\n}\n\n/**\n * Return if cardNumber is valid\n *\n * @param localItemInfo\n * @returns {*}\n */\nexport function isCurrentCardNumberValid(localItemInfo) {\n  return getCurrentCardTypeElement(localItemInfo).get('formatValid', false)\n    && getCardNumberField(localItemInfo).get('valid', false);\n}\n"]}